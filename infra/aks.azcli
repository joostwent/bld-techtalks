az login
# enable cluster monitoring
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
az feature register --name EnablePodIdentityPreview --namespace Microsoft.ContainerService
az feature register --name EnableOIDCIssuerPreview --namespace Microsoft.ContainerService

az feature list -o table --query "[?contains(name, 'Microsoft.ContainerService/EnableOIDCIssuerPreview')].{Name:name,State:properties.state}"
az provider register -n Microsoft.ContainerService
az extension remove --name aks-preview
az extension add --name aks-preview --version 0.5.50

# init variables
$suffix = "akstalk-bld-2202"
$suffix_short = "akstalkbld2202"
$dns ="techtalk.bld"
$rg = "rg-$suffix"
$pubip = "pip-$suffix"
$vnet = "vnet-$suffix"
$dnslink = "dns-lnk-$suffix"
$snet = "snet-$suffix"
$snetres = "snet-resources-$suffix"
$acr = "acr$suffix_short"
$acrhost = "$acr.azurecr.io"
$aks = "aks-$suffix"
$sqlsrv = "sqlsrv-$suffix"
$sqldb = "sqldb-$suffix"
$kv = "kv2-$suffix_short"
$mngdid = "pod-id-$suffix"
$aksid = "aks-id-$suffix"
$appregname = "appreg-aks-bld-techtalk-2202"
$location = "westeurope"

# create resource group
az group create --name $rg --location $location

# create vnet
az network vnet delete --name $vnet --resource-group $rg
az network vnet create --name $vnet --resource-group $rg --address-prefix 172.16.0.0/16
az network vnet subnet create --vnet-name $vnet --resource-group $rg --name $snet --address-prefix 172.16.1.0/24
az network vnet subnet create --vnet-name $vnet --resource-group $rg --name $snetres --address-prefix 172.16.2.0/24
$snetdetails = az network vnet subnet show --vnet-name $vnet --resource-group $rg --name $snetres | ConvertFrom-Json

$aksIdentity = az identity create -g $rg -n $aksid -o json | ConvertFrom-Json
# install aks
az aks create --resource-group $rg `
    --name $aks `
    --node-count 1 `
    --enable-managed-identity `
    --assign-identity $aksIdentity.id `
    --network-plugin azure `
    --vnet-subnet-id $snetdetails.id 

# attach acr after the managed identity above has been created
# create acr
az acr create -n $acr -g $rg --sku basic
az aks update -n $aks -g $rg --attach-acr $acr

# create a app registration
$appreg = az ad app create --display-name $appregname | ConvertFrom-Json
az ad app credential list --id $appreg.appId
$aksDetails = az aks show -n $aks -g $rg | ConvertFrom-Json
az aks 
az aks update -n $aks -g $rg --enable-oidc-issuer
az rest --method POST --uri "https://graph.microsoft.com/beta/applications/$appreg.appId/federatedIdentityCredentials" --body '{"name":"GcpFederation","issuer":"https://accounts.google.com","subject":"112633961854638529490","description":"Testing","audiences":["api://AzureADTokenExchange"]}'
az ad app delete --id 02155f3a-d33a-44e5-b82d-753e35228b00

# create azure sql database
$currentUser = az ad signed-in-user show | ConvertFrom-Json
#$podIdentity = az identity create -g $rg -n $mngdid -o json | ConvertFrom-Json
#$podIdentity = az identity show -g $rg -n $mngdid -o json | ConvertFrom-Json
$dbPwd = "bY*d^Di55Loz"
az sql server create --external-admin-principal-type User --external-admin-name $currentUser.displayName  --external-admin-sid $currentUser.objectId -g $rg -n $sqlsrv --admin-user bld --admin-password $dbPwd
az sql db create -g $rg -s $sqlsrv -n $sqldb --service-objective S0
az network vnet subnet update -g $rg --vnet-name $vnet --name $snetres --service-endpoints Microsoft.Sql
az sql server vnet-rule create --name "sqlvnet-$suffix" -g $rg -s $sqlsrv --subnet $snetres --vnet $vnet
$sqlsrvDetails = az sql server show -g $rg --name $sqlsrv | ConvertFrom-Json
az network private-link-resource list -g $rg -n $sqlsrv --type Microsoft.Sql/servers
az network private-endpoint create `
    --name "sql-pep-$suffix" `
    --resource-group $rg `
    --vnet-name $vnet --subnet $snetres `
    --private-connection-resource-id $sqlsrvDetails.id `
    --group-id sqlServer `
    --connection-name "sql-pep-$suffix"
$sqlDnsRecord = az network private-endpoint show --name "sql-pep-$suffix" --resource-group $rg | ConvertFrom-Json

# add DNS record for the private link above
$aksDetails = az aks show -g $rg -n $aks | ConvertFrom-Json
$nodeResourceGroup = $aksDetails.nodeResourceGroup
$dnsZones = az network private-dns zone list -g $nodeResourceGroup | ConvertFrom-Json
az network private-dns record-set a add-record --ipv4-address $sqlDnsRecord.customDnsConfigs[0].ipAddresses[0] --record-set-name bldsql --resource-group $nodeResourceGroup --zone-name $dnsZones[0].name

$sqlsrvDetails.fullyQualifiedDomainName

# create key vault and connection string secret
az keyvault create --resource-group $rg --name $kv
$fqdn = $sqlsrvDetails.fullyQualifiedDomainName
$connectionString = "Data Source=$fqdn;Initial Catalog=$sqldb;User Id=bld;Password=$dbPwd"
az keyvault secret set --name ConnectionString --vault-name $kv --value "$connectionString"


az aks install-cli
az aks get-credentials -g $rg -n $aks
az aks check-acr -n $aks -g $rg --acr $acrhost
az group delete --name $rg --no-wait

kubectl get namespaces
kubectl delete pod sampleticks-7b579774f4-wbl6v -n secrets
kubectl get pods -n secrets -w
kubectl logs -l app=sampleticks -n secrets --tail 250
kubectl get secrets --all-namespaces